@using Microsoft.AspNetCore.Html
@using Wfm.Domain.Consts
@using Wfm.Domain.Services.FileSystem
@using Wfm.Domain.Utils

@model Wfm.Domain.Features.FileManager.GetFiles.GetFilesResult

@{
    ViewData["Title"] = "Files";

    int dirs = @Model.Entries.Count(e => e.Type == FileSystemEntryType.Directory);
    int files = @Model.Entries.Count(e => e.Type == FileSystemEntryType.File);
    string filesSize = FileSystemHelper.FormatBytes(Model.Entries.Sum(e => e.Size));

    IHtmlContent OrderLink(string orderBy, bool desc = false)
    {
        return desc 
            ? Html.ActionLink("▼", "Index", "Files", 
                new { LocationIndex = Model.LocationIndex, RelativePath = Model.RelativePath, OrderBy = orderBy, OrderDesc = true })
            : Html.ActionLink("▲", "Index", "Files", 
                new { LocationIndex = Model.LocationIndex, RelativePath = Model.RelativePath, OrderBy = orderBy });
    };
}

<nav aria-label="breadcrumb">
    <ul>
        <li>@Html.ActionLink("Home", "Index", "Home")</li>
        <li>@Html.ActionLink(ViewBag.LocationName as string, "Index", "Files", new { LocationIndex = Model.LocationIndex })</li>
        @foreach (KeyValuePair<string, string> item in FileSystemHelper.ConvertPathToList(Model.RelativePath))
        {
            <li>@Html.ActionLink(item.Key, "Index", "Files", new { LocationIndex = Model.LocationIndex, RelativePath = item.Value })</li>
        }
    </ul>
</nav>

<p>
    <small>
        <em>
            @if (dirs > 0 && files > 0)
            {
                @:@dirs folder@(dirs > 1 ? "s" : ""), @files file@(files > 1 ? "s" : ""): @filesSize
            }
            else if (dirs > 0)
            {
                @:@dirs folder@(dirs > 1 ? "s" : "")
            }
            else if (files > 0)
            {
                @:@files file@(files > 1 ? "s" : ""): @filesSize
            }
            else
            {
                @:empty
            }

            , @Model.TotalEntries total items
        </em>
    </small>
</p>

<figure>
    <table role="grid">
        <thead>
            <tr>
                <th>@* Thumbnail *@</th>
                <th>Name @OrderLink(nameof(FileSystemEntry.Name)) @OrderLink(nameof(FileSystemEntry.Name), true)</th>
                <th>Size @OrderLink(nameof(FileSystemEntry.Size)) @OrderLink(nameof(FileSystemEntry.Size), true)</th>
                <th>Modified @OrderLink(nameof(FileSystemEntry.ModifiedDate)) @OrderLink(nameof(FileSystemEntry.ModifiedDate), true)</th>
                <th>Type @OrderLink(nameof(FileSystemEntry.Extension)) @OrderLink(nameof(FileSystemEntry.Extension), true)</th>
                <th>@* Actions *@</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in Model.Entries.OrderByDescending(e => e.Type))
            {
                <tr>
                    <td class="thumbnail">
                        @if (ThumbnailConsts.Extensions.Contains(entry.Extension.ToLower()))
                        {
                            <img src='@Url.Action("Thumbnail", "Files", new { LocationIndex = Model.LocationIndex, RelativeFilePath = entry.RelativePath })'
                                loading="lazy"
                                style="max-width: @(ThumbnailConsts.MaxWidth)px; max-height: @(ThumbnailConsts.MaxHeight)px" />
                        }
                    </td>
                    <td>
                        @if (entry.Type == FileSystemEntryType.Directory)
                        {
                            @Html.ActionLink(entry.Name, "Index", "Files", new { LocationIndex = Model.LocationIndex, RelativePath = entry.RelativePath })
                            <text> / </text>
                        }
                        else
                        {
                            @Html.ActionLink(entry.Name, "Preview", "Files", new { LocationIndex = Model.LocationIndex, RelativeFilePath = entry.RelativePath })
                        }
                    </td>
                    <td>
                        @if (entry.Type == FileSystemEntryType.File)
                        {
                            @FileSystemHelper.FormatBytes(entry.Size)
                        }
                    </td>
                    <td>@entry.ModifiedDate.ToString("yyyy.MM.dd HH:mm")</td>
                    <td>@entry.Extension.ToUpper()</td>
                    <td>
                        @if (entry.Type == FileSystemEntryType.File)
                        {
                            @Html.ActionLink("Preview", "Preview", "Files", new { LocationIndex = Model.LocationIndex, RelativeFilePath = entry.RelativePath }, 
                                new { target = "_blank" })
                            <text> | </text>
                            @Html.ActionLink("Download", "Download", "Files", new { LocationIndex = Model.LocationIndex, RelativeFilePath = entry.RelativePath })
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (Model.Page > 1)
    {
        @Html.ActionLink("< Previous", "Index", "Files", 
            new { LocationIndex = Model.LocationIndex, RelativePath = Model.RelativePath, OrderBy = Model.OrderBy, OrderDesc = Model.OrderDesc, Page = Model.Page - 1 })
        @(" | ")
    }
    @if (Model.Page < Model.TotalPages)
    {
        @Html.ActionLink("Next >", "Index", "Files", 
            new { LocationIndex = Model.LocationIndex, RelativePath = Model.RelativePath, OrderBy = Model.OrderBy, OrderDesc = Model.OrderDesc, Page = Model.Page + 1 })
    }
</figure>
